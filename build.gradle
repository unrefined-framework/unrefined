plugins {
    id 'com.android.library' version '8.1.0' apply false
}

def coreProjects    = [project(':core')]

def desktopProjects = [project(':desktop')]

def androidProjects = [project(':android')]

subprojects {
    apply plugin: 'signing'
    apply plugin: 'maven-publish'

    ext {
        libraryName = 'Unrefined'
        libraryGroupName = 'unrefined'
        libraryPublishGroupName = 'io.github.unrefined-framework'
        libraryDescription = 'Cross-platform multimedia application framework written in pure Java.'
        libraryUrl = 'https://github.com/unrefined-framework/unrefined'

        libraryVersionCode = '92-SNAPSHOT'
        libraryVersionName = '0.9.2-SNAPSHOT'
        libraryVersionCodeName = 'Claw Hammer'

        libraryLicenseName = 'The Apache License, Version 2.0'
        libraryLicenseUrl = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
        libraryScmConnection = 'scm:git:git@github.com/unrefined-framework/unrefined.git'
        libraryScmDeveloperConnection = libraryScmConnection
        libraryScmUrl = libraryUrl
        libraryDevelopersId = 'Unrefined'
        libraryDevelopersName = 'Unrefined Contributors'
        libraryDeveloperId = 'Tianscar'
        libraryDeveloperName = 'Karstian Lee'
        libraryDeveloperEmail = 'tianscar@protonmail.com'

        libraryAndroidCompileSdk = 33
        libraryAndroidMinSdk = 19
        libraryAndroidTargetSdk = 33

        libraryCoreSourceCompatibility = JavaVersion.VERSION_1_8
        libraryCoreTargetCompatibility = JavaVersion.VERSION_1_8

        libraryAndroidSourceCompatibility = JavaVersion.VERSION_1_8
        libraryAndroidTargetCompatibility = JavaVersion.VERSION_1_8

        libraryDesktopSourceCompatibility = JavaVersion.VERSION_1_8
        libraryDesktopTargetCompatibility = JavaVersion.VERSION_1_8
    }

    group libraryGroupName
    version libraryVersionCode

    // FIXME cleanup Javadocs from errors
    tasks.withType(Javadoc) {
        failOnError false
        options.addStringOption('Xdoclint:none', '-quiet')
    }
}

configure (coreProjects) {
    apply plugin: 'java-library'

    ext.unrefinedManifestDescription = 'Unrefined Core API'

    sourceCompatibility = libraryCoreSourceCompatibility
    targetCompatibility = libraryCoreTargetCompatibility
}

configure (desktopProjects) {
    apply plugin: 'java-library'

    ext.unrefinedManifestDescription = 'Unrefined For Java Standard Edition'

    sourceCompatibility = libraryDesktopSourceCompatibility
    targetCompatibility = libraryDesktopTargetCompatibility

    if (JavaVersion.current().ordinal() >= 21) {
        tasks.withType(Test).configureEach {
            jvmArgs += '--enable-native-access=ALL-UNNAMED'
        }
        tasks.withType(JavaExec).configureEach {
            jvmArgs += '--enable-native-access=ALL-UNNAMED'
        }
    }
}

configure (coreProjects + desktopProjects) {

    [compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

    dependencies {
        testImplementation platform('org.junit:junit-bom:5.9.1')
        testImplementation 'org.junit.jupiter:junit-jupiter'
    }

    test {
        useJUnitPlatform()
    }

    java {
        withJavadocJar()
        withSourcesJar()
    }

    ext.unrefinedResourcesDir = file("$buildDir/unrefined-resources/main")
    ext.unrefinedManifest = file("$unrefinedResourcesDir/META-INF/unrefined/MANIFEST.MF")

    tasks.register('generateUnrefinedManifest') {
        outputs.file(unrefinedManifest)
        doLast {
            def tmp = libraryGroupName + '.' + project.name.replaceAll('-', '.')
            unrefinedManifest.text =
"""Manifest-Version: 1.0
Specification-Vendor: $libraryDevelopersName
Specification-Title: $unrefinedManifestDescription
Specification-Version: $libraryVersionCodeName
Implementation-Vendor: $libraryDevelopersId
Implementation-Title: $tmp
Implementation-Version: $libraryVersionName
"""
        }
    }

    sourceSets.main.output.dir unrefinedResourcesDir, builtBy: generateUnrefinedManifest

    /*
    jar {
        manifest {
            attributes 'Specification-Vendor': libraryDevelopersName
            attributes 'Specification-Title': libraryName
            attributes 'Specification-Version': libraryVersionCodeName
            attributes 'Implementation-Vendor': libraryDevelopersId
            attributes 'Implementation-Title': libraryGroupName + '.' + project.name.replaceAll('-', '.')
            attributes 'Implementation-Version': libraryVersionName
        }
    }
     */

    javadoc {
        if (JavaVersion.current().isJava9Compatible()) {
            options.addBooleanOption('html5', true)
        }
    }

    publishing {
        publications {
            mavenJava(MavenPublication) {
                groupId = libraryPublishGroupName
                artifactId = "${rootProject.name}-${project.name}"
                version = libraryVersionName
                from components.java
                pom {
                    name = libraryPublishGroupName
                    description = libraryDescription
                    url = libraryUrl
                    licenses {
                        license {
                            name = libraryLicenseName
                            url = libraryLicenseUrl
                        }
                    }
                    developers {
                        developer {
                            id = libraryDeveloperId
                            name = libraryDeveloperName
                            email = libraryDeveloperEmail
                        }
                    }
                    scm {
                        connection = libraryScmConnection
                        developerConnection = libraryScmDeveloperConnection
                        url = libraryScmUrl
                    }
                }
            }
        }
        repositories {
            maven {
                name = "OSSRH"
                if (project.version.toString().endsWith("-SNAPSHOT")) {
                    url = "https://s01.oss.sonatype.org/content/repositories/snapshots"
                } else {
                    url = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
                }
                credentials {
                    username = findProperty("ossrhUsername") ?: System.getenv("OSSRH_USERNAME")
                    password = findProperty("ossrhPassword") ?: System.getenv("OSSRH_PASSWORD")
                }
            }
        }
    }

    signing {
        sign(publishing.publications.mavenJava)
    }

}

configure (androidProjects) {
    apply plugin: 'com.android.library'

    android {
        namespace libraryGroupName + '.' + project.name.replaceAll('-', '.')
        compileSdk libraryAndroidCompileSdk

        defaultConfig {
            minSdk libraryAndroidMinSdk
            targetSdk libraryAndroidTargetSdk

            testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
            consumerProguardFiles "consumer-rules.pro"
        }
        buildTypes {
            release {
                minifyEnabled false
                proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            }
        }
        compileOptions {
            sourceCompatibility libraryAndroidSourceCompatibility
            targetCompatibility libraryAndroidTargetCompatibility
        }
    }

    dependencies {
        testImplementation 'junit:junit:4.13.2'
        androidTestImplementation 'androidx.test.ext:junit:1.1.5'
        androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'
    }

    android {
        publishing {
            singleVariant('release') {
                withSourcesJar()
                withJavadocJar()
            }
        }
    }
    publishing {

        publications {
            release(MavenPublication) {
                groupId = libraryPublishGroupName
                artifactId = "${rootProject.name}-${project.name}"
                version = libraryVersionName
                afterEvaluate {
                    from components.release
                }
                pom {
                    name = libraryPublishGroupName
                    description = libraryDescription
                    url = libraryUrl
                    licenses {
                        license {
                            name = libraryLicenseName
                            url = libraryLicenseUrl
                        }
                    }
                    developers {
                        developer {
                            id = libraryDeveloperId
                            name = libraryDeveloperName
                            email = libraryDeveloperEmail
                        }
                    }
                    scm {
                        connection = libraryScmConnection
                        developerConnection = libraryScmDeveloperConnection
                        url = libraryScmUrl
                    }
                }
            }
        }
        repositories {
            maven {
                name = "OSSRH"
                if (project.version.toString().endsWith("-SNAPSHOT")) {
                    url = "https://s01.oss.sonatype.org/content/repositories/snapshots"
                } else {
                    url = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
                }
                credentials {
                    username = findProperty("ossrhUsername") ?: System.getenv("OSSRH_USERNAME")
                    password = findProperty("ossrhPassword") ?: System.getenv("OSSRH_PASSWORD")
                }
            }
        }
    }

    signing {
        sign(publishing.publications.release)
    }

}
